<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Miner</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Ubuntu&display=swap');

        body {
            font-family: 'Ubuntu', Arial, Helvetica, sans-serif;
            font-size: 16px;
        }
        .state {
            line-height: 20px;
        }
        table {
            margin-top: 20px;
            border: 1px solid #000;
            border-collapse: collapse;
            white-space: nowrap;
        }

        td {
            border: 0.5px solid #7b7b7b;
            padding: 5px;
            width: 20px;
            height: 20px;
            text-align: center;
            position: relative;
            display: inline-block;
            x-box-shadow: inset -1px 1px 0px rgb(255, 255, 255), inset 1px -1px 0px rgba(0, 0, 0, 0.23);
            background: linear-gradient(#fff, #e5e5e5);
        }
        .statePlay td:hover {
            background: rgba(176, 232, 245, .5);
            cursor: pointer;
        }
        td span {
            color: #aaa;
            font-size: 9px;
            position: absolute;
            top: 0px;
            right: 1px;
        }
        .empty {
            background: radial-gradient(circle, rgba(0,0,0,.06) 0%, rgba(0,0,0,.06) 7%, rgb(255, 255, 255) 7%);
            box-shadow: none;
            border: 0.5px solid #bbb;
        }
        .statePlay .empty:hover {
            background: radial-gradient(circle, rgba(0,0,0,.06) 0%, rgba(0,0,0,.06) 7%, rgb(255, 255, 255) 7%);
        }
        .stateWon .empty {
            background: rgba(155, 225, 145, 0.3);
            border: 0.5px solid #bfddbb;
        }
        .stateLose .empty {
            background: rgba(255, 84, 0, 0.1);
            border: 0.5px solid #e3cfc6;
        }
        .hidden {
            display: none;
        }
        input {
            width: 50px;
        }
        .config {
            position: absolute;
            top: 20px;
            right: 20px;
            border: solid 1px #ddd;
            padding: 0 20px 10px;
            border-radius: 10px;
            box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div id="app">
        <div class="loader">
            <h4>–°–∞–ø–µ—Ä!</h4> 
            –ó–∞–≥—Ä—É–∑–∫–∞...
        </div>
        <div class="hidden game">
            <div>
                <h4>–ò–≥—Ä–∞</h4>
                <p class="state">–°–æ—Å—Ç–æ—è–Ω–∏–µ: {{ minerState.title }}</p>
                <p class="state">–û—Å—Ç–∞–ª–æ—Å—å —è—á–µ–µ–∫: {{ uncheckedCellCount }}</p>
                <p class="state">–û—Å—Ç–∞–ª–æ—Å—å –±–æ–º–±: {{ miner.mineCount - miner.foundBombs }}, –Ω–∞–π–¥–µ–Ω–æ: {{ miner.foundBombs }}</p>
                
                <p><button @click="miner.showPlantedBombs = !miner.showPlantedBombs">–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–º–±—ã</button></p>
                <p><button @click="tip()">–ü–æ–¥—Å–∫–∞–∑–∫–∞</button> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {{ miner.tips }}</p>
            </div>

            <div class="config">
                <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</h4>
                <p>
                    X: <input type="number" v-model="config.x"> &nbsp;
                    Y: <input type="number" v-model="config.y">
                </p>
                <p>–ü—Ä–æ—Ü–µ–Ω—Ç –º–∏–Ω: <input type="number" v-model="config.minePercent"></p>
                <p><button @click="configApply()">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button></p>
            </div>

            <table
                    :key="`${miner.x}-${miner.y}-${miner.mineCount}`" 
                    :class="{ statePlay: miner.state < 2, stateWon: miner.state === 2, stateLose: miner.state === 3 }"
                    onselectstart="return false">
                <tr v-for="(row, i) in miner.field" :key="i">
                    <td v-for="(cell, j) in row" :key="j"
                            @click="cellClicked(i, j)"
                            @contextmenu.prevent="rightClickCell(i, j)"
                            :class="{ empty: 0 === cell[1] }"
                            @dblclick="openAllAround(i, j)"
                    >
                        <div>{{ zeroHider(cell[1]) }}</div>
                        <span v-if="miner.showPlantedBombs && cell[0] === 1">{{ cell[0] }}</span>
                    </td>
                </tr>
            </table>

            <p><button @click="startNewGame()">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button></p>
        </div>
    </div>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script>
        // import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js' - —Ç—Ä–µ–±—É–µ—Ç type="module"
        const { createApp, ref, reactive, computed, watch } = Vue // –µ—Å–ª–∏ –±–µ—Ä–µ–º –∏–∑ vue.global.js

        /*
        ToDo:
        - –°–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –ø–æ–ª–µ
        - –¢–∞–π–º–µ—Ä?
        - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –≤ –ø–æ–ª—è—Ö, –ø—Ä–µ—Å–µ—Ç—ã?
        - –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤
        - –ò–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π (–∫—É—Å–∫–∏ –∫–æ–¥–∞ —Å neighborX)
        - –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–æ–≥–¥–∞ –≤—Å–µ —Ñ–ª–∞–∂–∫–æ–≤ —Å—Ç–æ–∏—Ç —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ –±–æ–º–±, –∞ –∏–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç (—Ç–æ –µ—Å—Ç—å, –µ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è) –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å?
        - –ü–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –ø–æ–ª—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        - –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–±–µ–¥—ã
        */

        const App = createApp({
            setup() {

                let miner = reactive({
                    x: 10, // —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
                    y: 10,
                    minePercent: 10, // 10 - –ª–µ–≥–∫–∏–π, 20 - —Å—Ä–µ–¥–Ω–∏–π, 30 - —Å–ª–æ–∂–Ω—ã–π
                    mineCount: 0,
                    state: 0, // —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã. –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ minerState
                    foundMineCount: 0,
                    foundBombs: 0,
                    tips: 0,
                    showPlantedBombs: false,
                    dblClicks: [],
                    field: null,    /*
                                        –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∞—Ç –º–∞—Å—Å–∏–≤—ã [0, ""]:
                                            –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –Ω–∞–ª–∏—á–∏–µ –±–æ–º–±—ã 0/1
                                            –í—Ç–æ—Ä–æ–µ ‚Äì —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–π–∫–∏:
                                            "" - –∑–Ω–∞—á–∏—Ç –µ—â–µ –∑–∞–∫—Ä—ã—Ç–∞
                                            0 - –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –ø—É—Å—Ç–∞—è –∏ —Ä—è–¥–æ–º –Ω–µ—Ç –±–æ–º–±, –ø–æ–ª—É—á–∏—Ç –∫–ª–∞—Å—Å empty
                                            üí• - –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–º–±—É –∏–ª–∏ –≤–∑—Ä—ã–≤
                                            4 - –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –ø–æ–∫–∞–∑–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö 
                                    */
                    icons: {
                        flag: "üö©",
                        bomb: "üí£",
                        explosion: "üí•"
                    },
                })

                const config = {
                    x: 10, // —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
                    y: 10,
                    minePercent: 10
                }

                const startNewGame = () => {
                    miner.state = 0
                    miner.foundMineCount = 0
                    miner.foundBombs = 0
                    miner.tips = 0
                    miner.showPlantedBombs = false
                    miner.mineCount = Math.floor(miner.x * miner.y * miner.minePercent / 100)
                    miner.dblClicks = []

                    miner.field = reactive( // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
                        Array.from( // —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤: x, y, –±–æ–º–±–∞?, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏
                            { length: miner.x }, () => Array.from(
                                { length: miner.y }, () => [0, ""]
                            )
                        )
                    )
                }

                const configApply = () => {
                    miner.x = config.x
                    miner.y = config.y
                    miner.minePercent = config.minePercent

                    startNewGame()
                }

                const placeMines = (i, j) => {
                    let placedMines = 0

                    while (placedMines < miner.mineCount) {
                        const randomX = Math.floor(Math.random() * miner.x)
                        const randomY = Math.floor(Math.random() * miner.y)

                        if (Math.abs(randomX - i) <= 1 && Math.abs(randomY - j) <= 1) { // —Ç–µ–∫—É—â–∞—è –∏ —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
                            continue
                        }

                        if (0 === miner.field[randomX][randomY][0]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –±–æ–º–±—ã –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
                            miner.field[randomX][randomY][0] = 1
                            placedMines++
                        }
                    }
                }

                const cellClicked = (i, j) => {
                    if (0 === miner.state) { // –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
                        placeMines(i, j) // —Ä–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
                        miner.state = 1 // –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
                    } else if (2 === miner.state || 3 === miner.state) { // –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
                        return false
                    }

                    if (1 === miner.field[i][j][0]) { // –Ω–∞–∂–∞–ª –Ω–∞ –±–æ–º–±—É
                        gameOver(i, j)
                    } else {
                        getMinesAroundCellCount(i, j)
                    }
                }

                const openAllAround = (i, j) => { // –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –≤—Å–µ –ü–£–°–¢–´–ï –ø–æ–ª—è –≤–æ–∫—Ä—É–≥
                    for (let x = -1; x <= 1; x++) {
                        for (let y = -1; y <= 1; y++) {
                            if (0 === x && 0 === y) {
                                continue // –ø—Ä–æ–ø—É—Å–∫ —Ü–µ–Ω—Ç—Ä–∞
                            }

                            const neighborX = i + x
                            const neighborY = j + y

                            if ( // –µ—Å–ª–∏ –º—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª—è
                                neighborX >= 0 && neighborX < miner.field.length 
                                && neighborY >= 0 && neighborY < miner.field[neighborX].length
                            ) {
                                if ("" === miner.field[neighborX][neighborY][1]) {
                                    cellClicked(neighborX, neighborY)
                                }
                            }
                        }
                    }
                }

                const gameOver = (i, j) => {
                    showAllBombs()
                    miner.field[i][j] = [1, miner.icons.explosion] // –≤–∑—Ä—ã–≤
                    miner.state = 3 // –ø—Ä–æ–∏–≥—Ä–∞–ª 
                }

                const showAllBombs = (flag = 0) => {
                    emoji = (1 === flag) ? miner.icons.flag : miner.icons.bomb

                    for (let x = 0; x < miner.x; x++) {
                        for (let y = 0; y < miner.y; y++) {
                            if (1 === miner.field[x][y][0]) {
                                if (miner.icons.flag !== miner.field[x][y][1]) { // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–∂–∫–∏
                                    miner.field[x][y][1] = emoji
                                }
                            }
                        }
                    }
                }

                const getMinesAroundCellCount = (i, j) => {
                    let minesCount = 0

                    for (let x = -1; x <= 1; x++) {
                        for (let y = -1; y <= 1; y++) {
                            if (0 === x && 0 === y) {
                                continue // –ø—Ä–æ–ø—É—Å–∫ —Ü–µ–Ω—Ç—Ä–∞
                            }

                            const neighborX = i + x
                            const neighborY = j + y

                            if ( // –µ—Å–ª–∏ –º—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª—è
                                neighborX >= 0 && neighborX < miner.field.length 
                                && neighborY >= 0 && neighborY < miner.field[neighborX].length
                            ) {
                                if (1 === miner.field[neighborX][neighborY][0]) {
                                    minesCount++
                                }
                            }
                        }
                    }

                    const newCell = [...miner.field[i][j]]
                    newCell[1] = (minesCount > 0) ? minesCount : 0

                    miner.field[i].splice(j, 1, newCell) // —É–¥–∞–ª—è–µ–º 1 —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ç–æ—è—â–µ–≥–æ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ j –∏ —Å—Ç–∞–≤–∏–º –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–æ –Ω–æ–≤—ã–π

                    if (0 === newCell[1]) { // –µ—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç –±–æ–º–±, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—É—Å—Ç—ã–µ –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –¥–æ—Ç—è–Ω—É—Ç—å—Å—è
                        openEmptyCells(i, j)
                    }
                }

                const openEmptyCells = (i, j) => {
                    for (let x = -1; x <= 1; x++) {
                        for (let y = -1; y <= 1; y++) {
                            const neighborX = i + x
                            const neighborY = j + y

                            if (
                                neighborX >= 0 && neighborX < miner.field.length 
                                && neighborY >= 0 && neighborY < miner.field[neighborX].length
                            ) {
                                const neighborCell = miner.field[neighborX][neighborY]
                                if ("" === neighborCell[1] && 1 !== neighborCell[0]) { // –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –∏ —Ç—É—Ç –º–Ω–µ –º–∏–Ω–∞
                                    getMinesAroundCellCount(neighborX, neighborY) // —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–µ —Å–æ—Å–µ–¥–µ–π
                                    // –≤—Å–µ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ—Å–µ–¥–∏
                                }
                            }
                        }
                    }
                }

                const rightClickCell = (i, j) => {
                    if (1 !== miner.state) {
                        return
                    }

                    const cell = miner.field[i][j]

                    if ("" === cell[1]) { // —Å—Ç–∞–≤–∏–º –∏–ª–∏ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
                        miner.field[i][j] = [cell[0], miner.icons.flag]
                    } else if (miner.icons.flag === cell[1]) {
                        miner.field[i][j] = [cell[0], ""]
                    }
                }

                const tip = () => {
                    if (miner.state !== 1) { // —Ç–æ–ª—å–∫–æ –∏–¥—É—â–∞—è –∏–≥—Ä–∞
                        return 
                    }
                    const freeCells = []

                    const checkNeighbor = (x, y) => {
                        if ( // –µ—Å–ª–∏ –º—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è
                            x >= 0 && x < miner.field.length 
                            && y >= 0 && y < miner.field[x].length
                        ) {
                            if ("" !== miner.field[x][y][1]) {
                                return true
                            }
                        }
                        return false
                    }

                    for (let x = 0; x < miner.x; x++) {
                        for (let y = 0; y < miner.y; y++) {
                            if ( // —Å–ª–µ–≤–∞, —Å–ø—Ä–∞–≤–∞, —Å–≤–µ—Ä—Ö—É –∏–ª–∏ —Å–Ω–∏–∑—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ
                                checkNeighbor(x - 1, y)
                                || checkNeighbor(x + 1, y)
                                || checkNeighbor(x, y - 1)
                                || checkNeighbor(x, y + 1)
                            ) {
                                if (0 === miner.field[x][y][0] && "" === miner.field[x][y][1]) { // –µ—Å–ª–∏ –Ω–µ—Ç –±–æ–º–±—ã –∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞
                                    freeCells.push([x, y])
                                }
                            }
                        }
                    }
                    
                    const randomIndex = Math.floor(Math.random() * freeCells.length)
                    const randomCell = freeCells[randomIndex]
                    cellClicked(randomCell[0], randomCell[1])

                    miner.tips++
                }

                const minerState = computed(() => {
                    switch (miner.state) {
                        case 0:
                            return {
                                title: "–ù–æ–≤–∞—è –∏–≥—Ä–∞",
                                tableClass: "stateNew"
                            }
                        case 1:
                            return {
                                title: "–ò–≥—Ä–∞ –∏–¥–µ—Ç",
                                tableClass: "statePlay"
                            }
                        case 2:
                            return {
                                title: "–ü–æ–±–µ–¥–∞! üòé",
                                tableClass: "stateWon"
                            }
                        case 3:
                            return {
                                title: "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ ü§ï",
                                tableClass: "stateLose"
                            }
                    }
                })

                const getNumberOfFlags = computed(() => {
                    if (miner.state === 0) {
                        return 0
                    }

                    let flagsCount = 0

                    for (let x = 0; x < miner.x; x++) {
                        for (let y = 0; y < miner.y; y++) {
                            if (miner.icons.flag === miner.field[x][y][1]) {
                                flagsCount++
                            }
                        }
                    }

                    miner.foundBombs = flagsCount

                    return flagsCount
                })

                const uncheckedCellCount = computed(() => {
                    if (1 !== miner.state) { // —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–≥—Ä–µ
                        return 0
                    }

                    let uncheckedCells = 0

                    for (let x = 0; x < miner.x; x++) {
                        for (let y = 0; y < miner.y; y++) {
                            if ("" === miner.field[x][y][1]) {
                                uncheckedCells++
                            }
                        }
                    }

                    if (0 === uncheckedCells + getNumberOfFlags.value - miner.mineCount) {
                        miner.state = 2 // –≤—ã–∏–≥—Ä–∞–ª
                        miner.foundBombs = miner.mineCount
                        showAllBombs(1) // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–∞–∂–∫–∏
                    }

                    return uncheckedCells // –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                })

                const zeroHider = (str) => { // —Å–∫—Ä—ã–≤–∞–µ–º –Ω—É–ª–∏ –≤ –ø—É—Å—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö
                    return (0 === str) ? "" : str
                }

                startNewGame()

                return { 
                    miner, cellClicked, rightClickCell, minerState, zeroHider,
                    uncheckedCellCount, tip, configApply, config, startNewGame, openAllAround
                }
            },
            mounted() {
                document.querySelector(".game").classList.remove("hidden")
                document.querySelector(".loader").classList.add("hidden")
            }
        }).mount('#app')
    </script>
</body>
</html>
